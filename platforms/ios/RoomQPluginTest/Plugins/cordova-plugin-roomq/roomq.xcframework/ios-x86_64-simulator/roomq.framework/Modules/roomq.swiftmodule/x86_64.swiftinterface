// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 effective-4.1.50 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4 -enforce-exclusivity=checked -O -module-name roomq
import Foundation
import Swift
import UIKit
import WebKit
@_exported import roomq
public enum RequestType : Swift.String {
  case GET, POST
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Result<Value, Error> : roomq.ResultProtocol, Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible where Error : Swift.Error {
  case success(Value)
  case failure(Error)
  public init(value: Value)
  public init(error: Error)
  public init(_ value: Value?, failWith: @autoclosure () -> Error)
  public init(_ f: @autoclosure () throws -> Value)
  public init(attempt f: () throws -> Value)
  public func dematerialize() throws -> Value
  public func analysis<Result>(ifSuccess: (Value) -> Result, ifFailure: (Error) -> Result) -> Result
  public static var errorDomain: Swift.String {
    get
  }
  public static var functionKey: Swift.String {
    get
  }
  public static var fileKey: Swift.String {
    get
  }
  public static var lineKey: Swift.String {
    get
  }
  public static func error(_ message: Swift.String? = nil, function: Swift.String = #function, file: Swift.String = #file, line: Swift.Int = #line) -> Foundation.NSError
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var result: roomq.Result<Value, Error> {
    get
  }
}
extension Result where Error == roomq.AnyError {
  public init(_ f: @autoclosure () throws -> Value)
  public init(attempt f: () throws -> Value)
}
@available(*, deprecated, renamed: "Result.init(attempt:)")
public func materialize<T>(_ f: () throws -> T) -> roomq.Result<T, roomq.AnyError>
@available(*, deprecated, renamed: "Result.init(_:)")
public func materialize<T>(_ f: @autoclosure () throws -> T) -> roomq.Result<T, roomq.AnyError>
extension NSError : roomq.ErrorConvertible {
  public static func error(from error: Swift.Error) -> Self
}
@available(*, unavailable, message: "Use the overload which returns `Result<T, AnyError>` instead")
public func materialize<T>(_ f: () throws -> T) -> roomq.Result<T, Foundation.NSError>
@available(*, unavailable, message: "Use the overload which returns `Result<T, AnyError>` instead")
public func materialize<T>(_ f: @autoclosure () throws -> T) -> roomq.Result<T, Foundation.NSError>
@available(*, unavailable, message: "This has been removed. Use `Result.init(attempt:)` instead. See https://github.com/antitypical/Result/issues/85 for the details.")
public func `try`<T>(_ function: Swift.String = #function, file: Swift.String = #file, line: Swift.Int = #line, try: (Foundation.NSErrorPointer) -> T?) -> roomq.Result<T, Foundation.NSError>
@available(*, unavailable, message: "This has been removed. Use `Result.init(attempt:)` instead. See https://github.com/antitypical/Result/issues/85 for the details.")
public func `try`(_ function: Swift.String = #function, file: Swift.String = #file, line: Swift.Int = #line, try: (Foundation.NSErrorPointer) -> Swift.Bool) -> roomq.Result<(), Foundation.NSError>
public protocol ResultProtocol {
  associatedtype Value
  associatedtype Error : Swift.Error
  init(value: Self.Value)
  init(error: Self.Error)
  var result: roomq.Result<Self.Value, Self.Error> { get }
}
extension Result {
  public var value: Value? {
    get
  }
  public var error: Error? {
    get
  }
  public func map<U>(_ transform: (Value) -> U) -> roomq.Result<U, Error>
  public func flatMap<U>(_ transform: (Value) -> roomq.Result<U, Error>) -> roomq.Result<U, Error>
  public func fanout<U>(_ other: @autoclosure () -> roomq.Result<U, Error>) -> roomq.Result<(Value, U), Error>
  public func mapError<Error2>(_ transform: (Error) -> Error2) -> roomq.Result<Value, Error2> where Error2 : Swift.Error
  public func flatMapError<Error2>(_ transform: (Error) -> roomq.Result<Value, Error2>) -> roomq.Result<Value, Error2> where Error2 : Swift.Error
  public func bimap<U, Error2>(success: (Value) -> U, failure: (Error) -> Error2) -> roomq.Result<U, Error2> where Error2 : Swift.Error
}
extension Result {
  public func recover(_ value: @autoclosure () -> Value) -> Value
  public func recover(with result: @autoclosure () -> roomq.Result<Value, Error>) -> roomq.Result<Value, Error>
}
public protocol ErrorConvertible : Swift.Error {
  static func error(from error: Swift.Error) -> Self
}
extension Result where Error : roomq.ErrorConvertible {
  public func tryMap<U>(_ transform: (Value) throws -> U) -> roomq.Result<U, Error>
}
extension Result where Value : Swift.Equatable, Error : Swift.Equatable {
  public static func == (left: roomq.Result<Value, Error>, right: roomq.Result<Value, Error>) -> Swift.Bool
}
extension Result : Swift.Equatable where Value : Swift.Equatable, Error : Swift.Equatable {
}
extension Result {
  public static func ?? (left: roomq.Result<Value, Error>, right: @autoclosure () -> Value) -> Value
  public static func ?? (left: roomq.Result<Value, Error>, right: @autoclosure () -> roomq.Result<Value, Error>) -> roomq.Result<Value, Error>
}
@available(*, unavailable, renamed: "ErrorConvertible")
public protocol ErrorProtocolConvertible : roomq.ErrorConvertible {
}
public struct AnyError : Swift.Error {
  public let error: Swift.Error
  public init(_ error: Swift.Error)
}
extension AnyError : roomq.ErrorConvertible {
  public static func error(from error: Swift.Error) -> roomq.AnyError
}
extension AnyError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AnyError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var helpAnchor: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
}
public enum NoError : Swift.Error, Swift.Equatable {
  public static func == (lhs: roomq.NoError, rhs: roomq.NoError) -> Swift.Bool
}
public enum RoomQError : Swift.Error {
  case queueStopped
  public static func == (a: roomq.RoomQError, b: roomq.RoomQError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class RoomQ {
  public enum EnqueueError : Swift.Error {
    case authenticationError(token: Swift.String?)
    case serverError
  }
  public enum EnqueueSource {
    case directly
    case fromRoom
    case error
    public static func == (a: roomq.RoomQ.EnqueueSource, b: roomq.RoomQ.EnqueueSource) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum EnqueueResult {
    case wait(UIKit.UIViewController, Swift.String?)
    case enter(roomq.RoomQ.EnqueueSource, Swift.String?)
    case error(roomq.RoomQ.EnqueueError)
  }
  public enum GetExpiryTimeResult {
    case success(Swift.Int)
    case expired
    case noToken
    case error
  }
  public enum ExtendSessionResponse {
    case extended
    case expired
    case serverError
    public static func == (a: roomq.RoomQ.ExtendSessionResponse, b: roomq.RoomQ.ExtendSessionResponse) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DeleteSessionResponse {
    case success
    case serverError
    public static func == (a: roomq.RoomQ.DeleteSessionResponse, b: roomq.RoomQ.DeleteSessionResponse) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(clientID: Swift.String)
  public func enqueue(_ callback: @escaping (roomq.RoomQ.EnqueueResult) -> ())
  public func getExpiryTime(_ callback: @escaping (roomq.RoomQ.GetExpiryTimeResult) -> ())
  public func extendSession(minutes: Swift.Int, callback: @escaping (roomq.RoomQ.ExtendSessionResponse) -> ())
  public func deleteSession(callback: @escaping (roomq.RoomQ.DeleteSessionResponse) -> ())
  public static func clearToken()
  public static func set(token: Swift.String)
  @objc deinit
}
extension roomq.RequestType : Swift.Equatable {}
extension roomq.RequestType : Swift.Hashable {}
extension roomq.RequestType : Swift.RawRepresentable {}
extension roomq.RoomQError : Swift.Equatable {}
extension roomq.RoomQError : Swift.Hashable {}
extension roomq.RoomQ.EnqueueSource : Swift.Equatable {}
extension roomq.RoomQ.EnqueueSource : Swift.Hashable {}
extension roomq.RoomQ.ExtendSessionResponse : Swift.Equatable {}
extension roomq.RoomQ.ExtendSessionResponse : Swift.Hashable {}
extension roomq.RoomQ.DeleteSessionResponse : Swift.Equatable {}
extension roomq.RoomQ.DeleteSessionResponse : Swift.Hashable {}
